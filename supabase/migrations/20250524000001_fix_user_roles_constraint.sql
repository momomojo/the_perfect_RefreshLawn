-- Description: Ensure user_roles table structure
-- This migration ensures the user_roles table exists and has the proper structure.

-- First, we'll log what we're doing
DO $$
BEGIN
  RAISE NOTICE 'Checking user_roles table structure...';
END $$;

-- Check if the user_roles table exists and create it if missing
DO $$
BEGIN
  -- Check if table exists
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'user_roles'
  ) THEN
    -- Table doesn't exist, create it
    BEGIN
      EXECUTE '
        CREATE TABLE IF NOT EXISTS public.user_roles (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
          role public.app_role NOT NULL,
          CONSTRAINT user_roles_user_id_key UNIQUE (user_id)
        );
        COMMENT ON TABLE public.user_roles IS ''Application roles for each user.'';
      ';
      RAISE NOTICE 'Created user_roles table.';
    EXCEPTION WHEN OTHERS THEN
      RAISE NOTICE 'Could not create user_roles table: %', SQLERRM;
    END;
  ELSE
    -- Table exists, check if it has a primary key
    IF NOT EXISTS (
      SELECT 1 FROM information_schema.table_constraints 
      WHERE constraint_schema = 'public' 
        AND table_name = 'user_roles' 
        AND constraint_type = 'PRIMARY KEY'
    ) THEN
      -- No primary key, try to add one
      BEGIN
        EXECUTE 'ALTER TABLE public.user_roles ADD COLUMN IF NOT EXISTS id BIGINT GENERATED BY DEFAULT AS IDENTITY';
        EXECUTE 'ALTER TABLE public.user_roles ADD PRIMARY KEY (id)';
        RAISE NOTICE 'Added primary key to user_roles table.';
      EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Could not add primary key: %', SQLERRM;
      END;
    END IF;
    
    -- Make sure the user_id column references auth.users
    IF NOT EXISTS (
      SELECT 1 FROM information_schema.key_column_usage kcu
      JOIN information_schema.referential_constraints rc 
        ON kcu.constraint_catalog = rc.constraint_catalog 
        AND kcu.constraint_schema = rc.constraint_schema
        AND kcu.constraint_name = rc.constraint_name
      WHERE kcu.table_schema = 'public'
        AND kcu.table_name = 'user_roles'
        AND kcu.column_name = 'user_id'
        AND rc.unique_constraint_schema = 'auth'
        AND rc.unique_constraint_table = 'users'
    ) THEN
      -- No foreign key constraint to auth.users, try to add one
      BEGIN
        EXECUTE 'ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_user_id_fkey';
        EXECUTE 'ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE';
        RAISE NOTICE 'Added foreign key constraint to user_roles table.';
      EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Could not add foreign key constraint: %', SQLERRM;
      END;
    END IF;
  END IF;
END $$;

-- Log completion
DO $$
BEGIN
  RAISE NOTICE 'User roles table structure check completed.';
END $$; 